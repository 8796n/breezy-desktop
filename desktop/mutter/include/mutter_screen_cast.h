/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __MUTTER_SCREEN_CAST_H__
#define __MUTTER_SCREEN_CAST_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Mutter.ScreenCast */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST (org_gnome_mutter_screen_cast_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST, OrgGnomeMutterScreenCast))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST))
#define ORG_GNOME_MUTTER_SCREEN_CAST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST, OrgGnomeMutterScreenCastIface))

struct _OrgGnomeMutterScreenCast;
typedef struct _OrgGnomeMutterScreenCast OrgGnomeMutterScreenCast;
typedef struct _OrgGnomeMutterScreenCastIface OrgGnomeMutterScreenCastIface;

struct _OrgGnomeMutterScreenCastIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_create_session) (
    OrgGnomeMutterScreenCast *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties);

  gint  (*get_version) (OrgGnomeMutterScreenCast *object);

};

GType org_gnome_mutter_screen_cast_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_gnome_mutter_screen_cast_interface_info (void);
guint org_gnome_mutter_screen_cast_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_gnome_mutter_screen_cast_complete_create_session (
    OrgGnomeMutterScreenCast *object,
    GDBusMethodInvocation *invocation,
    const gchar *session_path);



/* D-Bus method calls: */
void org_gnome_mutter_screen_cast_call_create_session (
    OrgGnomeMutterScreenCast *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_mutter_screen_cast_call_create_session_finish (
    OrgGnomeMutterScreenCast *proxy,
    gchar **out_session_path,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_mutter_screen_cast_call_create_session_sync (
    OrgGnomeMutterScreenCast *proxy,
    GVariant *arg_properties,
    gchar **out_session_path,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gint org_gnome_mutter_screen_cast_get_version (OrgGnomeMutterScreenCast *object);
void org_gnome_mutter_screen_cast_set_version (OrgGnomeMutterScreenCast *object, gint value);


/* ---- */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY (org_gnome_mutter_screen_cast_proxy_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY, OrgGnomeMutterScreenCastProxy))
#define ORG_GNOME_MUTTER_SCREEN_CAST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY, OrgGnomeMutterScreenCastProxyClass))
#define ORG_GNOME_MUTTER_SCREEN_CAST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY, OrgGnomeMutterScreenCastProxyClass))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_PROXY))

typedef struct _OrgGnomeMutterScreenCastProxy OrgGnomeMutterScreenCastProxy;
typedef struct _OrgGnomeMutterScreenCastProxyClass OrgGnomeMutterScreenCastProxyClass;
typedef struct _OrgGnomeMutterScreenCastProxyPrivate OrgGnomeMutterScreenCastProxyPrivate;

struct _OrgGnomeMutterScreenCastProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgGnomeMutterScreenCastProxyPrivate *priv;
};

struct _OrgGnomeMutterScreenCastProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_gnome_mutter_screen_cast_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeMutterScreenCastProxy, g_object_unref)
#endif

void org_gnome_mutter_screen_cast_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeMutterScreenCast *org_gnome_mutter_screen_cast_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeMutterScreenCast *org_gnome_mutter_screen_cast_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_gnome_mutter_screen_cast_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeMutterScreenCast *org_gnome_mutter_screen_cast_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeMutterScreenCast *org_gnome_mutter_screen_cast_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON (org_gnome_mutter_screen_cast_skeleton_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON, OrgGnomeMutterScreenCastSkeleton))
#define ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON, OrgGnomeMutterScreenCastSkeletonClass))
#define ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON, OrgGnomeMutterScreenCastSkeletonClass))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SKELETON))

typedef struct _OrgGnomeMutterScreenCastSkeleton OrgGnomeMutterScreenCastSkeleton;
typedef struct _OrgGnomeMutterScreenCastSkeletonClass OrgGnomeMutterScreenCastSkeletonClass;
typedef struct _OrgGnomeMutterScreenCastSkeletonPrivate OrgGnomeMutterScreenCastSkeletonPrivate;

struct _OrgGnomeMutterScreenCastSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgGnomeMutterScreenCastSkeletonPrivate *priv;
};

struct _OrgGnomeMutterScreenCastSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_gnome_mutter_screen_cast_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeMutterScreenCastSkeleton, g_object_unref)
#endif

OrgGnomeMutterScreenCast *org_gnome_mutter_screen_cast_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Mutter.ScreenCast.Session */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION (org_gnome_mutter_screen_cast_session_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION, OrgGnomeMutterScreenCastSession))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION))
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION, OrgGnomeMutterScreenCastSessionIface))

struct _OrgGnomeMutterScreenCastSession;
typedef struct _OrgGnomeMutterScreenCastSession OrgGnomeMutterScreenCastSession;
typedef struct _OrgGnomeMutterScreenCastSessionIface OrgGnomeMutterScreenCastSessionIface;

struct _OrgGnomeMutterScreenCastSessionIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_record_area) (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GVariant *arg_properties);

  gboolean (*handle_record_monitor) (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_connector,
    GVariant *arg_properties);

  gboolean (*handle_record_virtual) (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties);

  gboolean (*handle_record_window) (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties);

  gboolean (*handle_start) (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop) (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation);

  void (*closed) (
    OrgGnomeMutterScreenCastSession *object);

};

GType org_gnome_mutter_screen_cast_session_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_gnome_mutter_screen_cast_session_interface_info (void);
guint org_gnome_mutter_screen_cast_session_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_gnome_mutter_screen_cast_session_complete_start (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation);

void org_gnome_mutter_screen_cast_session_complete_stop (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation);

void org_gnome_mutter_screen_cast_session_complete_record_monitor (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    const gchar *stream_path);

void org_gnome_mutter_screen_cast_session_complete_record_window (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    const gchar *stream_path);

void org_gnome_mutter_screen_cast_session_complete_record_area (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    const gchar *stream_path);

void org_gnome_mutter_screen_cast_session_complete_record_virtual (
    OrgGnomeMutterScreenCastSession *object,
    GDBusMethodInvocation *invocation,
    const gchar *stream_path);



/* D-Bus signal emissions functions: */
void org_gnome_mutter_screen_cast_session_emit_closed (
    OrgGnomeMutterScreenCastSession *object);



/* D-Bus method calls: */
void org_gnome_mutter_screen_cast_session_call_start (
    OrgGnomeMutterScreenCastSession *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_mutter_screen_cast_session_call_start_finish (
    OrgGnomeMutterScreenCastSession *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_mutter_screen_cast_session_call_start_sync (
    OrgGnomeMutterScreenCastSession *proxy,
    GCancellable *cancellable,
    GError **error);

void org_gnome_mutter_screen_cast_session_call_stop (
    OrgGnomeMutterScreenCastSession *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_mutter_screen_cast_session_call_stop_finish (
    OrgGnomeMutterScreenCastSession *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_mutter_screen_cast_session_call_stop_sync (
    OrgGnomeMutterScreenCastSession *proxy,
    GCancellable *cancellable,
    GError **error);

void org_gnome_mutter_screen_cast_session_call_record_monitor (
    OrgGnomeMutterScreenCastSession *proxy,
    const gchar *arg_connector,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_mutter_screen_cast_session_call_record_monitor_finish (
    OrgGnomeMutterScreenCastSession *proxy,
    gchar **out_stream_path,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_mutter_screen_cast_session_call_record_monitor_sync (
    OrgGnomeMutterScreenCastSession *proxy,
    const gchar *arg_connector,
    GVariant *arg_properties,
    gchar **out_stream_path,
    GCancellable *cancellable,
    GError **error);

void org_gnome_mutter_screen_cast_session_call_record_window (
    OrgGnomeMutterScreenCastSession *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_mutter_screen_cast_session_call_record_window_finish (
    OrgGnomeMutterScreenCastSession *proxy,
    gchar **out_stream_path,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_mutter_screen_cast_session_call_record_window_sync (
    OrgGnomeMutterScreenCastSession *proxy,
    GVariant *arg_properties,
    gchar **out_stream_path,
    GCancellable *cancellable,
    GError **error);

void org_gnome_mutter_screen_cast_session_call_record_area (
    OrgGnomeMutterScreenCastSession *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_mutter_screen_cast_session_call_record_area_finish (
    OrgGnomeMutterScreenCastSession *proxy,
    gchar **out_stream_path,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_mutter_screen_cast_session_call_record_area_sync (
    OrgGnomeMutterScreenCastSession *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GVariant *arg_properties,
    gchar **out_stream_path,
    GCancellable *cancellable,
    GError **error);

void org_gnome_mutter_screen_cast_session_call_record_virtual (
    OrgGnomeMutterScreenCastSession *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_mutter_screen_cast_session_call_record_virtual_finish (
    OrgGnomeMutterScreenCastSession *proxy,
    gchar **out_stream_path,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_mutter_screen_cast_session_call_record_virtual_sync (
    OrgGnomeMutterScreenCastSession *proxy,
    GVariant *arg_properties,
    gchar **out_stream_path,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY (org_gnome_mutter_screen_cast_session_proxy_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY, OrgGnomeMutterScreenCastSessionProxy))
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY, OrgGnomeMutterScreenCastSessionProxyClass))
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY, OrgGnomeMutterScreenCastSessionProxyClass))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_PROXY))

typedef struct _OrgGnomeMutterScreenCastSessionProxy OrgGnomeMutterScreenCastSessionProxy;
typedef struct _OrgGnomeMutterScreenCastSessionProxyClass OrgGnomeMutterScreenCastSessionProxyClass;
typedef struct _OrgGnomeMutterScreenCastSessionProxyPrivate OrgGnomeMutterScreenCastSessionProxyPrivate;

struct _OrgGnomeMutterScreenCastSessionProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgGnomeMutterScreenCastSessionProxyPrivate *priv;
};

struct _OrgGnomeMutterScreenCastSessionProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_gnome_mutter_screen_cast_session_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeMutterScreenCastSessionProxy, g_object_unref)
#endif

void org_gnome_mutter_screen_cast_session_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeMutterScreenCastSession *org_gnome_mutter_screen_cast_session_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeMutterScreenCastSession *org_gnome_mutter_screen_cast_session_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_gnome_mutter_screen_cast_session_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeMutterScreenCastSession *org_gnome_mutter_screen_cast_session_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeMutterScreenCastSession *org_gnome_mutter_screen_cast_session_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON (org_gnome_mutter_screen_cast_session_skeleton_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON, OrgGnomeMutterScreenCastSessionSkeleton))
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON, OrgGnomeMutterScreenCastSessionSkeletonClass))
#define ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON, OrgGnomeMutterScreenCastSessionSkeletonClass))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_SESSION_SKELETON))

typedef struct _OrgGnomeMutterScreenCastSessionSkeleton OrgGnomeMutterScreenCastSessionSkeleton;
typedef struct _OrgGnomeMutterScreenCastSessionSkeletonClass OrgGnomeMutterScreenCastSessionSkeletonClass;
typedef struct _OrgGnomeMutterScreenCastSessionSkeletonPrivate OrgGnomeMutterScreenCastSessionSkeletonPrivate;

struct _OrgGnomeMutterScreenCastSessionSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgGnomeMutterScreenCastSessionSkeletonPrivate *priv;
};

struct _OrgGnomeMutterScreenCastSessionSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_gnome_mutter_screen_cast_session_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeMutterScreenCastSessionSkeleton, g_object_unref)
#endif

OrgGnomeMutterScreenCastSession *org_gnome_mutter_screen_cast_session_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Mutter.ScreenCast.Stream */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM (org_gnome_mutter_screen_cast_stream_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM, OrgGnomeMutterScreenCastStream))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM))
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM, OrgGnomeMutterScreenCastStreamIface))

struct _OrgGnomeMutterScreenCastStream;
typedef struct _OrgGnomeMutterScreenCastStream OrgGnomeMutterScreenCastStream;
typedef struct _OrgGnomeMutterScreenCastStreamIface OrgGnomeMutterScreenCastStreamIface;

struct _OrgGnomeMutterScreenCastStreamIface
{
  GTypeInterface parent_iface;


  GVariant * (*get_parameters) (OrgGnomeMutterScreenCastStream *object);

  void (*pipewire_stream_added) (
    OrgGnomeMutterScreenCastStream *object,
    guint arg_node_id);

};

GType org_gnome_mutter_screen_cast_stream_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_gnome_mutter_screen_cast_stream_interface_info (void);
guint org_gnome_mutter_screen_cast_stream_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void org_gnome_mutter_screen_cast_stream_emit_pipewire_stream_added (
    OrgGnomeMutterScreenCastStream *object,
    guint arg_node_id);



/* D-Bus property accessors: */
GVariant *org_gnome_mutter_screen_cast_stream_get_parameters (OrgGnomeMutterScreenCastStream *object);
GVariant *org_gnome_mutter_screen_cast_stream_dup_parameters (OrgGnomeMutterScreenCastStream *object);
void org_gnome_mutter_screen_cast_stream_set_parameters (OrgGnomeMutterScreenCastStream *object, GVariant *value);


/* ---- */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY (org_gnome_mutter_screen_cast_stream_proxy_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY, OrgGnomeMutterScreenCastStreamProxy))
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY, OrgGnomeMutterScreenCastStreamProxyClass))
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY, OrgGnomeMutterScreenCastStreamProxyClass))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_PROXY))

typedef struct _OrgGnomeMutterScreenCastStreamProxy OrgGnomeMutterScreenCastStreamProxy;
typedef struct _OrgGnomeMutterScreenCastStreamProxyClass OrgGnomeMutterScreenCastStreamProxyClass;
typedef struct _OrgGnomeMutterScreenCastStreamProxyPrivate OrgGnomeMutterScreenCastStreamProxyPrivate;

struct _OrgGnomeMutterScreenCastStreamProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgGnomeMutterScreenCastStreamProxyPrivate *priv;
};

struct _OrgGnomeMutterScreenCastStreamProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_gnome_mutter_screen_cast_stream_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeMutterScreenCastStreamProxy, g_object_unref)
#endif

void org_gnome_mutter_screen_cast_stream_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeMutterScreenCastStream *org_gnome_mutter_screen_cast_stream_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeMutterScreenCastStream *org_gnome_mutter_screen_cast_stream_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_gnome_mutter_screen_cast_stream_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeMutterScreenCastStream *org_gnome_mutter_screen_cast_stream_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeMutterScreenCastStream *org_gnome_mutter_screen_cast_stream_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON (org_gnome_mutter_screen_cast_stream_skeleton_get_type ())
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON, OrgGnomeMutterScreenCastStreamSkeleton))
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON, OrgGnomeMutterScreenCastStreamSkeletonClass))
#define ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON, OrgGnomeMutterScreenCastStreamSkeletonClass))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON))
#define IS_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_MUTTER_SCREEN_CAST_STREAM_SKELETON))

typedef struct _OrgGnomeMutterScreenCastStreamSkeleton OrgGnomeMutterScreenCastStreamSkeleton;
typedef struct _OrgGnomeMutterScreenCastStreamSkeletonClass OrgGnomeMutterScreenCastStreamSkeletonClass;
typedef struct _OrgGnomeMutterScreenCastStreamSkeletonPrivate OrgGnomeMutterScreenCastStreamSkeletonPrivate;

struct _OrgGnomeMutterScreenCastStreamSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgGnomeMutterScreenCastStreamSkeletonPrivate *priv;
};

struct _OrgGnomeMutterScreenCastStreamSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_gnome_mutter_screen_cast_stream_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeMutterScreenCastStreamSkeleton, g_object_unref)
#endif

OrgGnomeMutterScreenCastStream *org_gnome_mutter_screen_cast_stream_skeleton_new (void);


G_END_DECLS

#endif /* __MUTTER_SCREEN_CAST_H__ */
